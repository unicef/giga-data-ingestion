/* eslint-disable */

/* prettier-ignore */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserManagementLayoutImport } from './routes/user-management/_layout'
import { Route as UploadLayoutImport } from './routes/upload/_layout'
import { Route as IngestApiLayoutImport } from './routes/ingest-api/_layout'
import { Route as UploadUploadGroupUploadTypeSuccessImport } from './routes/upload/$uploadGroup/$uploadType/success'
import { Route as UploadUploadGroupUploadTypeMetadataImport } from './routes/upload/$uploadGroup/$uploadType/metadata'
import { Route as UploadUploadGroupUploadTypeLayoutImport } from './routes/upload/$uploadGroup/$uploadType/_layout'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const UserManagementIndexLazyImport = createFileRoute('/user-management/')()
const UploadIndexLazyImport = createFileRoute('/upload/')()
const IngestApiIndexLazyImport = createFileRoute('/ingest-api/')()
const UploadUploadGroupUploadTypeIndexLazyImport = createFileRoute(
  '/upload/$uploadGroup/$uploadType/',
)()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UserManagementIndexLazyRoute = UserManagementIndexLazyImport.update({
  path: '/user-management/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/user-management/index.lazy').then((d) => d.Route),
)

const UploadIndexLazyRoute = UploadIndexLazyImport.update({
  path: '/upload/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/upload/index.lazy').then((d) => d.Route))

const IngestApiIndexLazyRoute = IngestApiIndexLazyImport.update({
  path: '/ingest-api/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/ingest-api/index.lazy').then((d) => d.Route),
)

const UserManagementLayoutRoute = UserManagementLayoutImport.update({
  path: '/user-management/layout',
  getParentRoute: () => rootRoute,
} as any)

const UploadLayoutRoute = UploadLayoutImport.update({
  path: '/upload/layout',
  getParentRoute: () => rootRoute,
} as any)

const IngestApiLayoutRoute = IngestApiLayoutImport.update({
  path: '/ingest-api/layout',
  getParentRoute: () => rootRoute,
} as any)

const UploadUploadGroupUploadTypeIndexLazyRoute =
  UploadUploadGroupUploadTypeIndexLazyImport.update({
    path: '/upload/$uploadGroup/$uploadType/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/upload/$uploadGroup/$uploadType/index.lazy').then(
      (d) => d.Route,
    ),
  )

const UploadUploadGroupUploadTypeSuccessRoute =
  UploadUploadGroupUploadTypeSuccessImport.update({
    path: '/upload/$uploadGroup/$uploadType/success',
    getParentRoute: () => rootRoute,
  } as any)

const UploadUploadGroupUploadTypeMetadataRoute =
  UploadUploadGroupUploadTypeMetadataImport.update({
    path: '/upload/$uploadGroup/$uploadType/metadata',
    getParentRoute: () => rootRoute,
  } as any)

const UploadUploadGroupUploadTypeLayoutRoute =
  UploadUploadGroupUploadTypeLayoutImport.update({
    path: '/upload/$uploadGroup/$uploadType/layout',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/ingest-api/_layout': {
      preLoaderRoute: typeof IngestApiLayoutImport
      parentRoute: typeof rootRoute
    }
    '/upload/_layout': {
      preLoaderRoute: typeof UploadLayoutImport
      parentRoute: typeof rootRoute
    }
    '/user-management/_layout': {
      preLoaderRoute: typeof UserManagementLayoutImport
      parentRoute: typeof rootRoute
    }
    '/ingest-api/': {
      preLoaderRoute: typeof IngestApiIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/upload/': {
      preLoaderRoute: typeof UploadIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/user-management/': {
      preLoaderRoute: typeof UserManagementIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/upload/$uploadGroup/$uploadType/_layout': {
      preLoaderRoute: typeof UploadUploadGroupUploadTypeLayoutImport
      parentRoute: typeof rootRoute
    }
    '/upload/$uploadGroup/$uploadType/metadata': {
      preLoaderRoute: typeof UploadUploadGroupUploadTypeMetadataImport
      parentRoute: typeof rootRoute
    }
    '/upload/$uploadGroup/$uploadType/success': {
      preLoaderRoute: typeof UploadUploadGroupUploadTypeSuccessImport
      parentRoute: typeof rootRoute
    }
    '/upload/$uploadGroup/$uploadType/': {
      preLoaderRoute: typeof UploadUploadGroupUploadTypeIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  IngestApiLayoutRoute,
  UploadLayoutRoute,
  UserManagementLayoutRoute,
  IngestApiIndexLazyRoute,
  UploadIndexLazyRoute,
  UserManagementIndexLazyRoute,
  UploadUploadGroupUploadTypeLayoutRoute,
  UploadUploadGroupUploadTypeMetadataRoute,
  UploadUploadGroupUploadTypeSuccessRoute,
  UploadUploadGroupUploadTypeIndexLazyRoute,
])
