/* eslint-disable */

/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// This file is auto-generated by TanStack Router
import { createFileRoute } from '@tanstack/react-router';

// Import Routes
import { Route as rootRoute } from "./routes/__root";
import { Route as UploadUploadGroupUploadTypeLayoutImport } from "./routes/upload/$uploadGroup/$uploadType/_layout";
import { Route as UploadLayoutImport } from "./routes/upload/_layout";

// Create Virtual Routes

const IndexLazyImport = createFileRoute("/")();
const UploadIndexLazyImport = createFileRoute("/upload/")();
const UploadUploadGroupUploadTypeIndexLazyImport = createFileRoute(
  "/upload/$uploadGroup/$uploadType/",
)();
const UploadUploadGroupUploadTypeSuccessLazyImport = createFileRoute(
  "/upload/$uploadGroup/$uploadType/success",
)();
const UploadUploadGroupUploadTypeMetadataLazyImport = createFileRoute(
  "/upload/$uploadGroup/$uploadType/metadata",
)();

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then(d => d.Route));

const UploadIndexLazyRoute = UploadIndexLazyImport.update({
  path: "/upload/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/upload/index.lazy").then(d => d.Route));

const UploadLayoutRoute = UploadLayoutImport.update({
  path: "/upload/layout",
  getParentRoute: () => rootRoute,
} as any);

const UploadUploadGroupUploadTypeIndexLazyRoute =
  UploadUploadGroupUploadTypeIndexLazyImport.update({
    path: "/upload/$uploadGroup/$uploadType/",
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import("./routes/upload/$uploadGroup/$uploadType/index.lazy").then(
      d => d.Route,
    ),
  );

const UploadUploadGroupUploadTypeSuccessLazyRoute =
  UploadUploadGroupUploadTypeSuccessLazyImport.update({
    path: "/upload/$uploadGroup/$uploadType/success",
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import("./routes/upload/$uploadGroup/$uploadType/success.lazy").then(
      d => d.Route,
    ),
  );

const UploadUploadGroupUploadTypeMetadataLazyRoute =
  UploadUploadGroupUploadTypeMetadataLazyImport.update({
    path: "/upload/$uploadGroup/$uploadType/metadata",
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import("./routes/upload/$uploadGroup/$uploadType/metadata.lazy").then(
      d => d.Route,
    ),
  );

const UploadUploadGroupUploadTypeLayoutRoute =
  UploadUploadGroupUploadTypeLayoutImport.update({
    path: "/upload/$uploadGroup/$uploadType/layout",
    getParentRoute: () => rootRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/upload/_layout": {
      preLoaderRoute: typeof UploadLayoutImport;
      parentRoute: typeof rootRoute;
    };
    "/upload/": {
      preLoaderRoute: typeof UploadIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/upload/$uploadGroup/$uploadType/_layout": {
      preLoaderRoute: typeof UploadUploadGroupUploadTypeLayoutImport;
      parentRoute: typeof rootRoute;
    };
    "/upload/$uploadGroup/$uploadType/metadata": {
      preLoaderRoute: typeof UploadUploadGroupUploadTypeMetadataLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/upload/$uploadGroup/$uploadType/success": {
      preLoaderRoute: typeof UploadUploadGroupUploadTypeSuccessLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/upload/$uploadGroup/$uploadType/": {
      preLoaderRoute: typeof UploadUploadGroupUploadTypeIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  UploadLayoutRoute,
  UploadIndexLazyRoute,
  UploadUploadGroupUploadTypeLayoutRoute,
  UploadUploadGroupUploadTypeMetadataLazyRoute,
  UploadUploadGroupUploadTypeSuccessLazyRoute,
  UploadUploadGroupUploadTypeIndexLazyRoute,
]);
