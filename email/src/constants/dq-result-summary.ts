export const dqResultSummary = {
  summary: {
    rows: 100,
    columns: 52,
    timestamp: "2024-02-21T10:26:06.064548+0000",
  },
  format_validation_checks: [
    {
      assertion: "is_not_numeric",
      column: "pop_within_3km",
      description: "Checks if column pop_within_3km is numeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "nearest_GSM_distance",
      description: "Checks if column nearest_GSM_distance is numeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "connectivity_govt",
      description: "Checks if column connectivity_govt is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "num_computers",
      description: "Checks if column num_computers is numeric.",
      count_failed: 50,
      count_passed: 50,
      count_overall: 100,
      percent_failed: 50.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_numeric",
      column: "fiber_node_distance",
      description: "Checks if column fiber_node_distance is numeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "cellular_coverage_availability",
      description:
        "Checks if column cellular_coverage_availability is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "water_availability",
      description: "Checks if column water_availability is alphanumeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "school_funding_type",
      description: "Checks if column school_funding_type is alphanumeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "electricity_availability",
      description: "Checks if column electricity_availability is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "connectivity",
      description: "Checks if column connectivity is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "school_data_collection_modality",
      description:
        "Checks if column school_data_collection_modality is alphanumeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "admin1",
      description: "Checks if column admin1 is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "connectivity_RT_ingestion_timestamp",
      description:
        "Checks if column connectivity_RT_ingestion_timestamp is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_numeric",
      column: "connectivity_govt_collection_year",
      description:
        "Checks if column connectivity_govt_collection_year is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "school_name",
      description: "Checks if column school_name is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "microwave_node_distance",
      description: "Checks if column microwave_node_distance is numeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "school_establishment_year",
      description: "Checks if column school_establishment_year is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_numeric",
      column: "schools_within_2km",
      description: "Checks if column schools_within_2km is numeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "school_area_type",
      description: "Checks if column school_area_type is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "num_students",
      description: "Checks if column num_students is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "connectivity_type_govt",
      description: "Checks if column connectivity_type_govt is alphanumeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "admin2_id_giga",
      description: "Checks if column admin2_id_giga is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "computer_lab",
      description: "Checks if column computer_lab is alphanumeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_numeric",
      column: "num_teachers",
      description: "Checks if column num_teachers is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_numeric",
      column: "school_data_collection_year",
      description: "Checks if column school_data_collection_year is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_numeric",
      column: "latitude",
      description: "Checks if column latitude is numeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "schools_within_3km",
      description: "Checks if column schools_within_3km is numeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "connectivity_RT",
      description: "Checks if column connectivity_RT is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "cellular_coverage_type",
      description: "Checks if column cellular_coverage_type is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "school_data_source",
      description: "Checks if column school_data_source is alphanumeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_numeric",
      column: "connectivity_govt_ingestion_timestamp",
      description:
        "Checks if column connectivity_govt_ingestion_timestamp is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "admin1_id_giga",
      description: "Checks if column admin1_id_giga is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "download_speed_contracted",
      description: "Checks if column download_speed_contracted is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "school_id_giga",
      description: "Checks if column school_id_giga is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "nearest_UMTS_distance",
      description: "Checks if column nearest_UMTS_distance is numeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "pop_within_2km",
      description: "Checks if column pop_within_2km is numeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "num_adm_personnel",
      description: "Checks if column num_adm_personnel is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "connectivity_RT_datasource",
      description:
        "Checks if column connectivity_RT_datasource is alphanumeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "admin2",
      description: "Checks if column admin2 is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "num_classrooms",
      description: "Checks if column num_classrooms is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "school_id_govt",
      description: "Checks if column school_id_govt is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "nearest_NR_distance",
      description: "Checks if column nearest_NR_distance is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_numeric",
      column: "num_computers_desired",
      description: "Checks if column num_computers_desired is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_numeric",
      column: "num_latrines",
      description: "Checks if column num_latrines is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_numeric",
      column: "pop_within_1km",
      description: "Checks if column pop_within_1km is numeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "education_level",
      description: "Checks if column education_level is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "is_school_open",
      description: "Checks if column is_school_open is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "nearest_LTE_distance",
      description: "Checks if column nearest_LTE_distance is numeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "disputed_region",
      description: "Checks if column disputed_region is alphanumeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_numeric",
      column: "school_location_ingestion_timestamp",
      description:
        "Checks if column school_location_ingestion_timestamp is numeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_numeric",
      column: "longitude",
      description: "Checks if column longitude is numeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_not_alphanumeric",
      column: "electricity_type",
      description: "Checks if column electricity_type is alphanumeric.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_not_numeric",
      column: "schools_within_1km",
      description: "Checks if column schools_within_1km is numeric.",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
  ],
  completeness_checks: [
    {
      assertion: "is_null_optional",
      column: "pop_within_1km",
      description: "Checks if nullable column pop_within_1km is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "pop_within_2km",
      description: "Checks if nullable column pop_within_2km is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_mandatory",
      column: "education_level",
      description: "Checks if non-nullable column education_level is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "download_speed_contracted",
      description:
        "Checks if nullable column download_speed_contracted is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "school_funding_type",
      description: "Checks if nullable column school_funding_type is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_mandatory",
      column: "longitude",
      description: "Checks if non-nullable column longitude is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "school_establishment_year",
      description:
        "Checks if nullable column school_establishment_year is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "nearest_GSM_distance",
      description: "Checks if nullable column nearest_GSM_distance is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "school_location_ingestion_timestamp",
      description:
        "Checks if nullable column school_location_ingestion_timestamp is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_mandatory",
      column: "school_id_govt",
      description: "Checks if non-nullable column school_id_govt is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "connectivity",
      description: "Checks if nullable column connectivity is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "num_classrooms",
      description: "Checks if nullable column num_classrooms is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_mandatory",
      column: "admin2",
      description: "Checks if non-nullable column admin2 is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_mandatory",
      column: "latitude",
      description: "Checks if non-nullable column latitude is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "num_students",
      description: "Checks if nullable column num_students is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "school_data_collection_year",
      description:
        "Checks if nullable column school_data_collection_year is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "schools_within_2km",
      description: "Checks if nullable column schools_within_2km is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "pop_within_3km",
      description: "Checks if nullable column pop_within_3km is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "electricity_availability",
      description: "Checks if nullable column electricity_availability is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "schools_within_1km",
      description: "Checks if nullable column schools_within_1km is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_mandatory",
      column: "admin1",
      description: "Checks if non-nullable column admin1 is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "num_latrines",
      description: "Checks if nullable column num_latrines is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "electricity_type",
      description: "Checks if nullable column electricity_type is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "connectivity_type_govt",
      description: "Checks if nullable column connectivity_type_govt is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "num_computers",
      description: "Checks if nullable column num_computers is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "microwave_node_distance",
      description: "Checks if nullable column microwave_node_distance is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "nearest_UMTS_distance",
      description: "Checks if nullable column nearest_UMTS_distance is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "connectivity_RT_datasource",
      description:
        "Checks if nullable column connectivity_RT_datasource is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "school_data_collection_modality",
      description:
        "Checks if nullable column school_data_collection_modality is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "water_availability",
      description: "Checks if nullable column water_availability is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "computer_lab",
      description: "Checks if nullable column computer_lab is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "nearest_NR_distance",
      description: "Checks if nullable column nearest_NR_distance is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "is_school_open",
      description: "Checks if nullable column is_school_open is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "admin1_id_giga",
      description: "Checks if nullable column admin1_id_giga is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "schools_within_3km",
      description: "Checks if nullable column schools_within_3km is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "disputed_region",
      description: "Checks if nullable column disputed_region is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "num_adm_personnel",
      description: "Checks if nullable column num_adm_personnel is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_mandatory",
      column: "school_id_giga",
      description: "Checks if non-nullable column school_id_giga is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "admin2_id_giga",
      description: "Checks if nullable column admin2_id_giga is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "cellular_coverage_availability",
      description:
        "Checks if nullable column cellular_coverage_availability is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "fiber_node_distance",
      description: "Checks if nullable column fiber_node_distance is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "connectivity_RT",
      description: "Checks if nullable column connectivity_RT is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "nearest_LTE_distance",
      description: "Checks if nullable column nearest_LTE_distance is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "num_computers_desired",
      description: "Checks if nullable column num_computers_desired is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "connectivity_govt_collection_year",
      description:
        "Checks if nullable column connectivity_govt_collection_year is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "school_data_source",
      description: "Checks if nullable column school_data_source is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "num_teachers",
      description: "Checks if nullable column num_teachers is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "connectivity_RT_ingestion_timestamp",
      description:
        "Checks if nullable column connectivity_RT_ingestion_timestamp is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_optional",
      column: "cellular_coverage_type",
      description: "Checks if nullable column cellular_coverage_type is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "connectivity_govt_ingestion_timestamp",
      description:
        "Checks if nullable column connectivity_govt_ingestion_timestamp is null",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_null_mandatory",
      column: "school_name",
      description: "Checks if non-nullable column school_name is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "school_area_type",
      description: "Checks if nullable column school_area_type is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_null_optional",
      column: "connectivity_govt",
      description: "Checks if nullable column connectivity_govt is null",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
  ],
  domain_checks: [
    {
      assertion: "is_invalid_domain",
      column: "connectivity_type_govt",
      description:
        "Checks if column connectivity_type_govt is within fiber, xdsl, wired, cellular, p2mp wireless, p2p wireless, satellite, other, copper, coaxial, unknown",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_invalid_domain",
      column: "school_area_type",
      description: "Checks if column school_area_type is within urban, rural",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_invalid_domain",
      column: "connectivity_govt",
      description: "Checks if column connectivity_govt is within yes, no",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_invalid_domain",
      column: "education_level",
      description:
        "Checks if column education_level is within Pre-Primary, Primary, Secondary, Post-Secondary, Pre-Primary and Primary, Primary and Secondary, Pre-Primary, Primary and Secondary, Primary, Secondary and Post-Secondary",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_invalid_domain",
      column: "cellular_coverage_type",
      description:
        "Checks if column cellular_coverage_type is within 2G, 3G, 4G, 5G, no coverage",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_invalid_domain",
      column: "cellular_coverage_availability",
      description:
        "Checks if column cellular_coverage_availability is within yes, no",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_invalid_domain",
      column: "school_data_collection_modality",
      description:
        "Checks if column school_data_collection_modality is within online, in-person, phone, other",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_invalid_domain",
      column: "electricity_availability",
      description:
        "Checks if column electricity_availability is within yes, no",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_invalid_domain",
      column: "water_availability",
      description: "Checks if column water_availability is within yes, no",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_invalid_domain",
      column: "computer_lab",
      description: "Checks if column computer_lab is within yes, no",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_invalid_domain",
      column: "electricity_type",
      description:
        "Checks if column electricity_type is within electrical grid, diesel generator, solar power station, other",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
  ],
  range_checks: [
    {
      assertion: "is_invalid_range",
      column: "num_adm_personnel",
      description: "Checks if column num_adm_personnel is between 0 and 200",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_invalid_range",
      column: "school_establishment_year",
      description:
        "Checks if column school_establishment_year is between 1000 and 2024",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_invalid_range",
      column: "num_computers",
      description: "Checks if column num_computers is between 0 and 500",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_invalid_range",
      column: "num_teachers",
      description: "Checks if column num_teachers is between 0 and 200",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_invalid_range",
      column: "num_computers_desired",
      description:
        "Checks if column num_computers_desired is between 0 and 1000",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_invalid_range",
      column: "num_students",
      description: "Checks if column num_students is between 0 and 10000",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_invalid_range",
      column: "schools_within_2km",
      description: "Checks if column schools_within_2km is between 0 and 40",
      count_failed: 96,
      count_passed: 4,
      count_overall: 100,
      percent_failed: 96.0,
      percent_passed: 4.0,
    },
    {
      assertion: "is_invalid_range",
      column: "num_classrooms",
      description: "Checks if column num_classrooms is between 0 and 200",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_invalid_range",
      column: "schools_within_1km",
      description: "Checks if column schools_within_1km is between 0 and 20",
      count_failed: 88,
      count_passed: 12,
      count_overall: 100,
      percent_failed: 88.0,
      percent_passed: 12.0,
    },
    {
      assertion: "is_invalid_range",
      column: "microwave_node_distance",
      description:
        "Checks if column microwave_node_distance is between 0 and 10000000",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_invalid_range",
      column: "schools_within_3km",
      description: "Checks if column schools_within_3km is between 0 and 60",
      count_failed: 96,
      count_passed: 4,
      count_overall: 100,
      percent_failed: 96.0,
      percent_passed: 4.0,
    },
    {
      assertion: "is_invalid_range",
      column: "longitude",
      description: "Checks if column longitude is between -180 and 180",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_invalid_range",
      column: "download_speed_contracted",
      description:
        "Checks if column download_speed_contracted is between 1 and 500",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_invalid_range",
      column: "latitude",
      description: "Checks if column latitude is between -90 and 90",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_invalid_range",
      column: "school_data_collection_year",
      description:
        "Checks if column school_data_collection_year is between 1000 and 2024",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
    {
      assertion: "is_invalid_range",
      column: "fiber_node_distance",
      description:
        "Checks if column fiber_node_distance is between 0 and 10000000",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "is_invalid_range",
      column: "num_latrines",
      description: "Checks if column num_latrines is between 0 and 200",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
  ],
  duplicate_rows_checks: [
    {
      assertion: "duplicate",
      column: "school_id_giga",
      description: "Checks if column school_id_giga has a duplicate",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "duplicate",
      column: "school_id_govt",
      description: "Checks if column school_id_govt has a duplicate",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "duplicate_set",
      column: "school_id_govt_school_name_education_level_location_id",
      description:
        "Checks if there are duplicates across these columns school_id_govt_school_name_education_level_location_id",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "duplicate_all_except_school_code",
      column: "",
      description:
        "Checks if there are duplicates across all columns except School ID",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "duplicate_name_level_within_110m_radius",
      column: "",
      description:
        "Checks if there are duplicates across name, level, lat_110, long_110",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "duplicate_set",
      column: "education_level_location_id",
      description:
        "Checks if there are duplicates across these columns education_level_location_id",
      count_failed: 52,
      count_passed: 48,
      count_overall: 100,
      percent_failed: 52.0,
      percent_passed: 48.0,
    },
    {
      assertion: "duplicate_set",
      column: "school_name_education_level_location_id",
      description:
        "Checks if there are duplicates across these columns school_name_education_level_location_id",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
  ],
  geospatial_checks: [
    {
      assertion: "is_school_density_greater_than_5",
      column: "",
      description:
        "Checks if the the school density within the area is greater than 5.",
      count_failed: 60,
      count_passed: 40,
      count_overall: 100,
      percent_failed: 60.0,
      percent_passed: 40.0,
    },
    {
      assertion: "precision",
      column: "latitude",
      description: "Checks if column latitude has at least 5 decimal places",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
    {
      assertion: "precision",
      column: "longitude",
      description: "Checks if column longitude has at least 5 decimal places",
      count_failed: 0,
      count_passed: 100,
      count_overall: 100,
      percent_failed: 0.0,
      percent_passed: 100.0,
    },
  ],
  critical_error_check: [
    {
      assertion: "has_critical_error",
      column: "",
      description: "Checks if the dataset contains a critical error.",
      count_failed: 100,
      count_passed: 0,
      count_overall: 100,
      percent_failed: 100.0,
      percent_passed: 0.0,
    },
  ],
};
